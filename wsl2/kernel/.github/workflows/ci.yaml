on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 4'
  workflow_dispatch:

name: Build

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  build:
    name: Kernel
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        repo: ["microsoft/WSL2-Linux-Kernel","torvalds/linux"]
        ref: ["master","linux-msft-wsl-5.10.y"]
        exclude:
        - repo: "torvalds/linux"
          ref: "linux-msft-wsl-5.10.y"
        - repo: microsoft/WSL2-Linux-Kernel
          ref: master
      fail-fast: false
    if: |
      ! contains( github.event.head_commit.message, '[skip ci]')
    steps:
    - uses: actions/checkout@main
      with:
        fetch-depth: 1
        repository: ${{ matrix.repo }}
        ref: ${{ matrix.ref }}
    - name: Build Kernel
      env:
        ref: ${{ matrix.ref }}
      id: build
      run: |
        pwd

        if [ -d $PWD/../linux ];then
          cp -a ../linux/* .
        fi

        sudo apt update
        sudo apt install -y build-essential flex bison libssl-dev libelf-dev rsync

        mkdir -p Microsoft/

        if [ $ref = "linux-msft-wsl-5.10.y" -o $ref = "master" ];then
          curl -fsSL -o Microsoft/config-wsl \
            https://github.com/khs1994/WSL2-Linux-Kernel/raw/master/config-wsl-5.10
        fi

        if [ $ref = "master" ];then
          # curl -L -o feature-dxgkrnl.diff https://github.com/microsoft/WSL2-Linux-Kernel/commit/a11b238a0398ea063c555d8c9fab3d3ed95882fa.patch
          curl -L -o feature-dxgkrnl.diff https://github.com/nathanchance/WSL2-Linux-Kernel/commit/7e3c16ef15554d7efd7ce946d335b9f8f93e6b92.patch
          patch -p1 < feature-dxgkrnl.diff
        fi

        echo "
        # nfs
        CONFIG_NFS_V4_1=y
        CONFIG_NFS_V4_2=y

        # iscsi
        CONFIG_ACPI_CONFIGFS=y
        CONFIG_CONFIGFS_FS=y
        CONFIG_SCSI_ISCSI_ATTRS=y
        CONFIG_ISCSI_TCP=y
        CONFIG_ISCSI_BOOT_SYSFS=y
        CONFIG_ISCSI_TARGET=y
        CONFIG_TARGET_CORE=y

        CONFIG_NUMA=y

        # CNI Calico IPIP
        # CONFIG_NET_IPIP=y

        # CNI Calico eBPF
        CONFIG_BPFILTER=y
        CONFIG_NETFILTER_XT_MATCH_BPF=y
        # CONFIG_NET_CLS_BPF=y
        # CONFIG_NET_ACT_BPF=y
        # CONFIG_BPF_JIT=y

        CONFIG_NET_SCH_SFQ=y
        CONFIG_NET_ACT_POLICE=y
        CONFIG_NET_ACT_GACT=y

        CONFIG_CRYPTO_USER=y
        CONFIG_CRYPTO_USER_API_RNG=y
        # CONFIG_CRYPTO_USER_API_HASH=y
        CONFIG_CRYPTO_USER_API_AEAD=y

        # kata container
        # CONFIG_VHOST_VSOCK=y

        CONFIG_TIME_NS=y
        " >> Microsoft/config-wsl

        # sudo sed -i "s/microsoft-standard/microsoft-WSL2-standard/g" Microsoft/config-wsl

        make LOCALVERSION="" KCONFIG_CONFIG=Microsoft/config-wsl -j $(nproc)

        make LOCALVERSION="" INSTALL_MOD_PATH=linux modules_install
        make LOCALVERSION="" INSTALL_HDR_PATH=linux/usr headers_install

        ls -lah arch/x86/boot/bzImage

        kernelversion=$(make -s kernelversion)-microsoft-standard-WSL2
        kernelversion=`ls linux/lib/modules`
        echo ::set-output name=kernelversion::`echo $kernelversion`
    - name: Dist
      env:
        kernelversion: ${{ steps.build.outputs.kernelversion }}
      run: |
        mv Microsoft/config-wsl .config

        hdr_dir=linux-headers-${kernelversion}

        echo "./.config" >../hdr_files
        find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl >>../hdr_files
        find arch/x86/include include scripts -type f >>../hdr_files
        find arch/x86 -name module.lds -o -name Kbuild.platforms -o -name Platform>>../hdr_files

        find $(find arch/x86 -name include -o -name scripts -type d) -type f>>../hdr_files

        if grep -q '^CONFIG_STACK_VALIDATION=y' .config ; then
          find tools/objtool -type f -executable>>../hdr_files
        fi

        find arch/x86/include Module.symvers include scripts -type f>>../hdr_files

        if grep -q '^CONFIG_GCC_PLUGINS=y' .config ; then
          find scripts/gcc-plugins -name \*.so -o -name gcc-common.h>>../hdr_files
        fi

        mkdir -p linux/usr/src/$hdr_dir

        ls -la linux/lib/modules
        ls -la linux/lib/modules/$kernelversion

        ln -snf /usr/src/linux-headers-$kernelversion linux/lib/modules/$kernelversion/build
        unlink linux/lib/modules/$kernelversion/source
        rsync -a --files-from=../hdr_files ./ linux/usr/src/$hdr_dir

        cd linux
        sudo chown -R root:root .
        sudo tar -zcvf ../linux.tar.gz .
        cd ..
        mkdir wsl2_dist
        cp arch/x86/boot/bzImage wsl2_dist/wsl2Kernel
        cp linux.tar.gz wsl2_dist

        cp arch/x86/boot/bzImage  kernel-${kernelversion}.img
        cp linux.tar.gz           linux-headers-${kernelversion}.tar.gz
        cp linux/lib/modules/$kernelversion/modules.builtin \
                                  ${kernelversion}-modules.builtin
    - uses: actions/upload-artifact@main
      name: Upload Kernel
      with:
        name: wsl2-kernel-${{ steps.build.outputs.kernelversion }}.img
        path: kernel-${{ steps.build.outputs.kernelversion }}.img
    - uses: actions/upload-artifact@main
      name: Upload Kernel and headers
      with:
        name: wsl2-kernel-${{ steps.build.outputs.kernelversion }}
        path: wsl2_dist
    - uses: actions/upload-artifact@main
      name: Upload modules.builtin file
      with:
        name: wsl2-kernel-${{ steps.build.outputs.kernelversion }}-modules.builtin
        path: linux/lib/modules/${{ steps.build.outputs.kernelversion }}/modules.builtin
    - name: Build deb
      id: deb
      env:
        kernelversion: ${{ steps.build.outputs.kernelversion }}
      run: |
        pwd

        ls -la

        mkdir -p linux-headers-${kernelversion}/DEBIAN
        mkdir -p deb/DEBIAN
        curl -L -o deb/DEBIAN/control https://raw.githubusercontent.com/khs1994/WSL2-Linux-Kernel/master/deb/DEBIAN/control

        sed "s/KERNEL_VERSION/${kernelversion}/g" deb/DEBIAN/control \
            > linux-headers-${kernelversion}/DEBIAN/control

        DEB_VERSION=`echo ${kernelversion} | cut -d '-' -f 1`
        sed -i "s/DEB_VERSION/${DEB_VERSION}/g" \
            linux-headers-${kernelversion}/DEBIAN/control

        cat linux-headers-${kernelversion}/DEBIAN/control

        sudo cp -a linux/. linux-headers-${kernelversion}
        ls -la linux-headers-${kernelversion}
        cd linux-headers-${kernelversion}/usr
        sudo tar -zcvf ${kernelversion}-include.tar.gz include
        sudo rm -rf include

        cd ../../
        DEB_NAME=linux-headers-${kernelversion}_${DEB_VERSION}-1_amd64.deb
        sudo dpkg-deb -b linux-headers-${kernelversion} $DEB_NAME

        echo ::set-output name=DEB_NAME::${DEB_NAME}
    - uses: actions/upload-artifact@main
      name: Upload deb
      with:
        name: ${{ steps.deb.outputs.DEB_NAME }}
        path: ${{ steps.deb.outputs.DEB_NAME }}
    - uses: docker://pcit/github-release
      if: |
        github.event_name != 'pull_request'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repo: khs1994/WSL2-Linux-Kernel
        # headers deb,kernel.img,headers .tar.gz,modules.builtin
        files: ${{ steps.deb.outputs.DEB_NAME }},kernel-${{ steps.build.outputs.kernelversion }}.img,linux-headers-${{ steps.build.outputs.kernelversion }}.tar.gz,${{ steps.build.outputs.kernelversion }}-modules.builtin
        target_commitish: refs/tags/${{ steps.build.outputs.kernelversion }}
        note: ${{ steps.build.outputs.kernelversion }}
        title: ${{ steps.build.outputs.kernelversion }}
        checksum: sha256
        draft: true
        overwrite: true
