version: ~> 1.0

language: go
# language: bash

go:
# - 1.12.9
- 1.13

services:
- docker

dist: xenial
# dist: bionic

cache:
  directories:
    - kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin
    - /home/travis/.khs1994-docker-lnmp/caches

# git:
#   clone: false

before_install:
  # /home/travis/build/khs1994-docker/lnmp-k8s
  # /home/travis/gopath/src/github.com/[secure]-docker/lnmp-k8s
  - pwd
  - git clone --depth=1 -b 19.03 https://github.com/khs1994-docker/lnmp ~/lnmp
  - cp -r ~/lnmp/. ~/gopath/src/github.com/khs1994-docker
  - ls -la ~/gopath/src/github.com/khs1994-docker
  # remove some apt source
  - cat /etc/apt/sources.list
  - ls /etc/apt/sources.list.d || true
  - sudo rm -rf /etc/apt/sources.list.d/pgdg.list || true

  - sestatus || true
  - ls /home/travis/.khs1994-docker-lnmp/caches
  - echo $PATH

  - sudo netstat -lnpt
  - cat /etc/resolv.conf
  - cat /etc/systemd/resolved.conf || true
  - sudo systemd-resolve --status || true
  - sudo systemctl status systemd-resolved || true
  - sudo systemctl stop systemd-resolved || true
  - sudo netstat -lnpt
  - cat /etc/resolv.conf
  - echo "nameserver 169.254.169.254" | sudo tee /etc/resolv.conf
  - echo "search google.internal" | sudo tee -a /etc/resolv.conf
  - cat /etc/resolv.conf
  - nslookup gcr.io

  - docker-compose --version
  - docker --version
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) test"
  - sudo apt-get update || true
  - sudo apt-get -y install docker-ce || sudo apt -f install
  - docker --version
  # 升级最新 Docker Compose
  # - docker-compose --version
  # - sudo rm /usr/local/bin/docker-compose
  # - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION:-1.25.0}/docker-compose-`uname -s`-`uname -m` > docker-compose
  # - chmod +x docker-compose
  # - sudo mv docker-compose /usr/local/bin
  # - docker-compose --version
  - sudo cat /etc/docker/daemon.json
  - echo '{"registry-mirrors":["https://mirror.gcr.io"]}' | sudo tee /etc/docker/daemon.json
  - sudo cat /etc/docker/daemon.json
  - docker run --rm --privileged docker/binfmt:820fdd95a9972a5308930a2bdfb8573dd4447ad3
  - cat /proc/sys/fs/binfmt_misc/qemu-aarch64
  - docker buildx create --name mybuilder
  - docker buildx use mybuilder
  - docker buildx inspect --bootstrap
  - ip addr
  - hostnamectl
  - export SERVER_IP=`ifconfig ens4 | grep "inet" | awk '{ print $2}' | cut -d ':' -f 2`
  - ./lnmp-k8s > /dev/null
  - echo $SERVER_IP
install:
  - travis_retry echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
  - travis_retry echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME_CCR} --password-stdin uswccr.ccs.tencentyun.com
  - export KUBERNETES_TYPE=server
  - sed -i "s!192.168.199.100!${SERVER_IP}!g" systemd/.env
  - sed -i "s#/opt/k8s#${K8S_ROOT:-/opt/k8s}#g" systemd/.env
  - test -n "${TRAVIS_TAG}" && ./lnmp-k8s _build_k8s_image || true
  - cat systemd/.env
  - sudo hostnamectl set-hostname node1
  - echo "${SERVER_IP} node1" | sudo tee -a /etc/hosts

  - docker-compose up cfssl-local
  # - source .env
  - ls kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/kubectl || rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64

  - sudo sed -i "s#^ENABLE_CN_MIRROR=.*#ENABLE_CN_MIRROR=0#g" ./.env

  - travis_retry ./lnmp-k8s kubernetes-server ${LNMP_K8S_GET}
  - ./lnmp-k8s local-install ${LNMP_K8S_LOCAL_INSTALL_OPTIONS:-}
  # - debug=1 ./lnmp-k8s local-install ${LNMP_K8S_LOCAL_INSTALL_OPTIONS:-}

  - export PATH=$PATH:${K8S_ROOT:-/opt/k8s}/bin
  - rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/*.tar
  - rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/*.docker_tag
  - rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/apiextensions-apiserver
  - rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/cloud-controller-manager
  - rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/hyperkube
  - rm -rf kubernetes-release/release/v${CI_KUBERNETES_VERSION}-linux-amd64/kubernetes/server/bin/mounter

before_script:
  - ls -la /etc/systemd/system/

  - sudo systemctl cat etcd
  - sudo systemctl start etcd
  # master
  - sudo systemctl cat kube-apiserver
  - sudo systemctl start kube-apiserver

  - sudo systemctl cat kube-controller-manager
  - sudo systemctl start kube-controller-manager

  - sudo systemctl cat kube-scheduler
  - sudo systemctl start kube-scheduler
  # worker
  - sudo systemctl cat kube-proxy
  - sudo systemctl start kube-proxy

  - sudo systemctl cat docker
  - sudo systemctl cat containerd || true

  - sudo systemctl cat kube-containerd

  - sudo systemctl cat crio || true

  - test -z "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" && (sudo systemctl daemon-reload ; sudo systemctl restart kube-containerd) || true
  - test "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" = "--docker"  && (sudo systemctl restart docker || sudo journalctl -u docker) || true
  - test "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" = "--crio" && (sudo systemctl daemon-reload ; sudo systemctl restart crio) || true

  - docker info

  - sleep 10
  - sudo systemctl cat kubelet
  - sudo systemctl start kubelet

  - sleep 10
  # - sudo systemctl status etcd
  # - sudo systemctl status docker
  # - sudo systemctl status kube-apiserver
  # - sudo systemctl status kube-controller-manager
  # - sudo systemctl status kube-scheduler
  # - sudo systemctl status kube-proxy
  # - sudo systemctl status kubelet

  - travis_retry kubectl version
  - kubectl cluster-info

  - sleep 30

  - sudo journalctl -u kube-apiserver
  - sudo journalctl -u kube-controller-manager
  - sudo journalctl -u kube-scheduler
  - sudo journalctl -u kube-proxy
  - sudo journalctl -u kubelet
  - sudo journalctl -u kube-containerd || true
  - sudo journalctl -u crio || true

  - kubectl get csr
  - CSR_NAME=`kubectl get csr | grep system:node:node1 | awk '{print $1}' | head -1`
  - echo ${CSR_NAME}
  - kubectl certificate approve $CSR_NAME
  - kubectl get csr

  - sed -i "s!/opt/k8s!${K8S_ROOT}!g" addons/cni/calico-custom/calico.yaml
  - kubectl apply -k addons/cni/calico-custom

  - kubectl get node
  - kubectl get all -A
  - kubectl api-versions
  - kubectl api-resources

script:
  - kubectl apply -k addons/coredns
  - kubectl apply -k addons/dashboard
  - kubectl apply -k addons/metrics-server
  - kubectl apply -k addons/ingress-nginx/nodeport
  - sleep 100
  - kubectl describe pod -n kube-system -l k8s-app=calico-kube-controllers
  - sudo crictl logs $(sudo crictl ps -a --label io.kubernetes.container.name=calico-kube-controllers -q)

  - kubectl get all --all-namespaces
  # test metrics server
  - travis_retry kubectl top node
  # test dns
  - kubectl describe pod coredns -n kube-system
  - kubectl logs $(kubectl describe pod coredns -n kube-system | grep "Name:" | head -1 | awk '{ print $2}') -n kube-system
  - kubectl run nginx --image nginx:1.17.8-alpine
  - sleep 20
  - kubectl get all
  - kubectl get pod -o wide
  - POD_NAME=`kubectl get pod | awk '{print $1}' | tail -1`
  - kubectl exec ${POD_NAME} -- cat /etc/resolv.conf
  - kubectl exec ${POD_NAME} -- ping -c 5 kubernetes
  - kubectl exec ${POD_NAME} -- ping -c 5 github.com
  - kubectl delete deployment nginx || true
  - kubectl delete pod nginx || true
  - kubectl get all
  # test ingress-nginx
  - HTTP_PORT=`kubectl get service -n ingress-nginx | grep ingress-nginx | awk '{print $5}' | cut -d ':' -f 2 | cut -d / -f 1`
  - curl ${SERVER_IP}:${HTTP_PORT}

  - test "${LNMP_K8S_GET}" = "--url" && sudo rm -rf kubernetes-release/release/ || true

after_success:
  - sudo crictl version
  - sudo crictl info
  - ip addr
  - git diff
  - cd cli ; (sh generate.sh || true); cd ..
  - git diff
  - sudo netstat -lnpt
  - ./tests/test.sh
# switch containerd 1.3.x
  - test -z "${LNMP_K8S_LOCAL_INSTALL_OPTIONS}" && sudo systemctl start kube-containerd-130
  - sleep 30
  - sudo crictl version
  - sudo crictl info
  - sudo ls -la /opt || true
  - sudo ls -la /opt/k8s || true
  - sudo ls -la ${K8S_ROOT:-/opt/k8s} || true

env:
  global:
    - DOCKER_CLI_EXPERIMENTAL=enabled

matrix:
  include:
    # alpha version
    - os: linux
      dist: bionic
      env: CI_KUBERNETES_VERSION=1.18.0-beta.0 LNMP_K8S_GET="--url" K8S_IMAGE=khs1994/kubernetes-server
    - os: linux
      dist: bionic
      env: CI_KUBERNETES_VERSION=1.19.0-alpha.0 LNMP_K8S_GET="--url" K8S_IMAGE=khs1994/kubernetes-server
    # next version
    # - os: linux
    #   dist: bionic
    #   env: CI_KUBERNETES_VERSION=1.17.0 LNMP_K8S_GET="--url" K8S_IMAGE=khs1994/kubernetes-server
    # current stable version
    - os: linux
      dist: bionic
      env: CI_KUBERNETES_VERSION=1.17.0 LNMP_K8S_LOCAL_INSTALL_OPTIONS="--crio"        K8S_IMAGE=khs1994/kubernetes-server
    - os: linux
      dist: xenial
      env: CI_KUBERNETES_VERSION=1.17.0 LNMP_K8S_LOCAL_INSTALL_OPTIONS="--docker"      K8S_IMAGE=khs1994/kubernetes-server
    - os: linux
      dist: xenial
      env: CI_KUBERNETES_VERSION=1.17.0 LNMP_K8S_GET="--url"                           K8S_IMAGE=khs1994/kubernetes-server
    - os: linux
      dist: xenial
      env: CI_KUBERNETES_VERSION=1.17.0 LNMP_K8S_GET="--url"                           K8S_IMAGE=khs1994/kubernetes-server K8S_ROOT=/opt/k8s-custom
    # old version
    - os: linux
      dist: bionic
      env: CI_KUBERNETES_VERSION=1.16.1
    - os: linux
      dist: bionic
      env: CI_KUBERNETES_VERSION=1.15.2
    - os: linux
      dist: xenial
      env: CI_KUBERNETES_VERSION=1.14.2
  fast_finish: true
  allow_failures:
  - env: CI_KUBERNETES_VERSION=1.18.0-beta.0 LNMP_K8S_GET="--url" K8S_IMAGE=khs1994/kubernetes-server
  - env: CI_KUBERNETES_VERSION=1.19.0-alpha.0 LNMP_K8S_GET="--url" K8S_IMAGE=khs1994/kubernetes-server
