# syntax=docker/dockerfile:experimental
FROM --platform=$TARGETPLATFORM alpine:3.10

LABEL maintainer="khs1994-docker/lnmp <khs1994@khs1994.com>"

ARG VCS_REF

LABEL org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/khs1994-docker/php"

ENV TZ=Asia/Shanghai \
    APP_ENV=development

# ARG PHP_VERSION=

ARG ALPINE_URL=dl-cdn.alpinelinux.org

ARG PHP_EXTENSION_EXTRA

ARG PECL_EXTENSION_EXTRA

ARG APK_EXTRA="libzip"

ARG APK_DEV_EXTRA="libzip-dev"

# dependencies required for running "phpize"
# these get automatically installed and removed by "docker-php-ext-*" (unless they're already installed)
ENV PHPIZE_DEPS \
      autoconf \
      dpkg-dev dpkg \
      file \
      g++ \
      gcc \
      libc-dev \
      make \
      pkgconf \
      re2c \
      bison

# persistent / runtime deps
RUN set -ex \
      && sed -i "s/dl-cdn.alpinelinux.org/${ALPINE_URL}/g" /etc/apk/repositories \
      && apk add --no-cache \
                 curl \
                 tar \
                 xz \
# https://github.com/docker-library/php/issues/494
                 openssl \
                 # git \
# 以下两个均为版本控制系统
# subversion \
# mercurial \
                 # openssh-client \
                 # tini \
                 bash \
                 tzdata \
# ensure www-data user exists
# RUN set -x \
      && addgroup -g 82 -S www-data \
      && adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

ENV PHP_INI_DIR /usr/local/etc/php
# RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS \
        --disable-phpdbg \
        # --enable-fpm \
        # --with-fpm-user=www-data \
        # --with-fpm-group=www-data \
        # https://github.com/docker-library/php/issues/510
        --enable-embed=shared \
        # --disable-cgi \
        --with-gettext=shared \
        --with-gd=shared \
            --with-freetype-dir=/usr \
            --disable-gd-jis-conv \
            --with-jpeg-dir=/usr \
            --with-png-dir=/usr \
            --with-webp-dir=/usr \
            --with-xpm-dir=/usr \
        --with-pcre-regex \
        --with-pdo-mysql=shared \
        --with-pdo-pgsql=shared \
        --with-xsl=shared \
        --enable-bcmath=shared \
        --enable-libxml \
        --enable-inline-optimization \
        --enable-mbregex \
        --enable-pcntl=shared \
        --enable-shmop=shared \
        --enable-soap=shared \
        --enable-sockets=shared \
        --enable-sysvmsg=shared \
        --enable-sysvsem=shared \
        --enable-sysvshm=shared \
        --enable-xml \
        --enable-zip \
            --with-libzip \
        --enable-calendar=shared \
        --enable-intl=shared \
        --enable-exif=shared \
        --with-bz2=shared \
        --with-tidy=shared \
        --with-gmp=shared \
        --with-imap=shared \
            --with-kerberos \
            --with-imap-ssl \
        --with-icu-dir=/usr \
        --with-xmlrpc=shared \
        --with-pic \
        --with-enchant=shared \
        --enable-fileinfo=shared \
        --with-ldap=shared \
            --with-ldap-sasl \
        --enable-phar \
        --enable-posix=shared \
        --with-pspell=shared \
        --enable-shmop=shared \
        --with-snmp=shared \
        --with-mysqli=shared \
        --with-pgsql=shared
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

# ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F

ENV PHP_VERSION 7.2.22

# ENV PHP_URL="https://www.php.net/get/php-7.2.22.tar.xz/from/this/mirror" PHP_ASC_URL="https://www.php.net/get/php-7.2.22.tar.xz.asc/from/this/mirror"
# ENV PHP_SHA256="da1a705c0bc46410e330fc6baa967666c8cd2985378fb9707c01a8e33b01d985" PHP_MD5=""

# COPY --from=php:alpine /usr/local/bin/docker-php-* /usr/local/bin/

# COPY --from=php:alpine /usr/local/bin/docker-php-source /usr/local/bin/
# COPY --from=php:alpine /usr/local/bin/docker-php-entrypoint /usr/local/bin/
# COPY --from=php:alpine /usr/local/bin/docker-php-ext-configure /usr/local/bin/
# COPY --from=php:alpine /usr/local/bin/docker-php-ext-enable /usr/local/bin/
# COPY --from=php:alpine /usr/local/bin/docker-php-ext-install /usr/local/bin/

RUN --mount=type=bind,from=php:7.2.22-alpine,source=/usr/src,target=/usr/local/src,rw \
  --mount=type=bind,from=php:7.2.22-alpine,source=/usr/local/bin,target=/opt/bin,rw \
  set -xe \
  && mkdir -p /usr/src \
  && cp /usr/local/src/* /usr/src/ \
  && export PATH=$PATH:/opt/bin \
  ; mkdir -p $PHP_INI_DIR/conf.d \
  && cp /opt/bin/docker-php-entrypoint /usr/local/bin \
	&& apk add --no-cache --virtual .build-deps \
          $PHPIZE_DEPS \
          coreutils \
          curl-dev \
          libedit-dev \
          openssl-dev \
          libsodium-dev \
          libxml2-dev \
          sqlite-dev \
          argon2-dev \
          cyrus-sasl-dev \
          postgresql-dev \
          # libzip-dev \
          libpng-dev \
          freetype-dev \
          libjpeg-turbo-dev \
          libwebp-dev \
          libxpm-dev \
          libexif-dev \
          libxslt-dev \
          gmp-dev \
          xmlrpc-c-dev \
          bzip2-dev \
          enchant-dev \
          imap-dev \
          gettext-dev \
          icu-dev \
          krb5-dev \
          aspell-dev \
          openldap-dev \
          pcre-dev \
          tidyhtml-dev \
          net-snmp-dev \
          openldap-dev \
          zlib-dev \
          ${APK_DEV_EXTRA:-} \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		        CPPFLAGS="$PHP_CPPFLAGS" \
		        LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
# make sure invalid --configure-flags are fatal errors intead of just warnings
		--enable-option-checking=fatal \
		\
# https://github.com/docker-library/php/issues/439
		--with-mhash \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# https://wiki.php.net/rfc/libsodium
		--with-sodium=shared \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
# https://wiki.php.net/rfc/argon2_password_hash (7.2+)
		--with-password-argon2 \
		\
# bundled pcre does not support JIT on s390x
# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
		$(test "$gnuArch" = 's390x-linux-musl' && echo '--without-pcre-jit') \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
  && find -type f -name '*.a' -delete \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
# && docker-php-source delete \
  \
  && docker-php-ext-enable bcmath \
                           bz2 \
                           calendar \
                           enchant \
                           exif \
                           fileinfo \
                           gd \
                           gettext \
                           gmp \
                           imap \
                           intl \
                           mysqli \
                           pcntl \
                           pdo_mysql \
                           pdo_pgsql \
                           pgsql \
                           posix \
                           pspell \
                           shmop \
                           snmp \
                           soap \
                           sodium \
                           sockets \
                           sysvmsg \
                           sysvsem \
                           sysvshm \
                           tidy \
                           xmlrpc \
                           xsl \
                           # opcache 已默认安装，需要自行载入
                           opcache \
                           ${PHP_EXTENSION_EXTRA:-} \
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache $runDeps \
  \
# https://github.com/docker-library/php/issues/443
  && pecl update-channels \
	&& rm -rf /tmp/pear ~/.pearrc \
  \
# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
# RUN docker-php-ext-enable sodium
  \
  && { find $(php-config --extension-dir) -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
  && strip --strip-all /usr/local/lib/libphp7.so \
  && apk del --no-network --no-cache .build-deps \
  # 创建日志文件夹
  && ln -sf /dev/stderr /var/log/xdebug-remote.log \
  && rm -rf /usr/src/*

ENV PECL_BUILD_DEPS \
      libmemcached-dev \
      yaml-dev \
      zlib-dev

ENV PECL_RUN_DEPS \
      libmemcached-libs \
      yaml \
      zlib

ENV PECL_EXTENSION \
      mongodb \
      igbinary \
      redis \
      memcached \
      xdebug \
      yaml \
      ${PECL_EXTENSION_EXTRA:-}

RUN --mount=type=bind,from=php:7.2.22-alpine,source=/usr/local/bin,target=/opt/bin,rw \
      set -x \
      && export PATH=$PATH:/opt/bin \
      && apk add --no-cache --virtual .pecl_build_deps $PECL_BUILD_DEPS $PHPIZE_DEPS \
      && apk add --no-cache --virtual .pecl_run_deps $PECL_RUN_DEPS \
      && for extension in $PECL_EXTENSION;do \
           pecl install $extension \
           && docker-php-ext-enable $(echo ${extension} | cut -d '-' -f 1) || echo "pecl ${extension} install error" \
           && rm -rf /usr/local/lib/php/doc/$(echo ${extension} | cut -d '-' -f 1) \
           && rm -rf /usr/local/lib/php/test/$(echo ${extension} | cut -d '-' -f 1) \
           && rm -rf /usr/local/include/php/ext/$(echo ${extension} | cut -d '-' -f 1) \
           && strip --strip-all $(php-config --extension-dir)/$(echo ${extension} | cut -d '-' -f 1).so ; \
         done \
# https://github.com/tideways/php-xhprof-extension.git
      && test `uname -m` = 'x86_64' \
      && (cd /tmp \
      && curl -fsSL https://github.com/tideways/php-xhprof-extension/archive/master.tar.gz \
             | tar -zxvf - \
      && cd php-xhprof-extension-master \
      && phpize \
      && ./configure \
      && make \
      && make install \
      && docker-php-ext-enable tideways_xhprof \
      && mv /usr/local/etc/php/conf.d/docker-php-ext-tideways_xhprof.ini \
          /usr/local/etc/php/conf.d/docker-php-ext-tideways_xhprof.ini.default) \
      || true \
      && apk del --no-network --no-cache .pecl_build_deps \
# 默认不启用 xdebug
      && mv /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
           /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini.default \
      && rm -rf /tmp/* \
      && rm -rf /usr/local/lib/php/.registry/.channel.pecl.php.net/*

WORKDIR /app

ENTRYPOINT ["docker-php-entrypoint"]

CMD ["php", "-a"]
