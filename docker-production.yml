version: "3.5"
services:
  # 单节点 Swarm mode 集群
  #
  # khs1994.com Docker Swarm mode 最佳实践
  #
  # 开发环境构建镜像
  #
  # $ docker-compose -f docker-production.yml build
  # $ docker-compose -f docker-production.yml push
  #
  # 生产环境在集群部署
  #
  # $ docker stack deploy -c docker-production.yml lnmp
  # $ docker stack ps lnmp
  #
  # 原则
  # 尽可能减少 volumes 项

  mysql:
    build:
      context: ./dockerfile/mysql/
      dockerfile: Dockerfile
    #
    # image: username/lnmp-mysql:tag
    #
    # image: khs1994/lnmp-mysql:8.0.3
    #
    image: mysql:8.0.3
    env_file:
      - ./cli/timezone.env
    environment:
      # MYSQL_ROOT_PASSWORD: mytest
      MYSQL_ROOT_PASSWORD_FILE: /etc/db_root_password
      MYSQL_DATABASE: test
    networks:
      - backend
    # ports:
    #   - "127.0.0.1:3306:3306"
    volumes:
      - ./backup/init.production:/docker-entrypoint-initdb.d:ro
      - ./backup/mysql:/backup:rw
      - mysql-data:/var/lib/mysql:rw
      # - ./config/mysql/conf.production.d:/etc/mysql/conf.d:ro
    command: ["mysqld","--character-set-server=utf8mb4"]
    logging:
      driver: journald
    deploy:
      # mode: replicated
      # replicas: 2
      # endpoint_mode: dnsrr
      # endpoint_mode: vip
      placement:
        # 在管理节点运行
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      # resources:
      #   limits:
      #     cpus: '0.50'
      #     memory: 50M
      #   reservations:
      #     cpus: '0.25'
      #     memory: 20M
      labels:
        - "com.khs1994.lnmp.mysql=true"
    secrets:
      - source: db_root_password
        target: /etc/db_root_password
    configs:
      - source: mysql_cnf
        target: /etc/mysql/conf.d/docker.cnf
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.mysql=true"

  redis:
    build:
      context: ./dockerfile/redis/
      dockerfile: Dockerfile
    #
    # image: username/lnmp-redis:tag
    #
    # image: khs1994/lnmp-redis:4.0.8
    #
    image: redis:4.0.8-alpine
    env_file: ./cli/timezone.env
    # ports:
    #   - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data:rw
    networks:
      - backend
    command: ["redis-server","/redis.conf"]
    logging:
      driver: journald
    deploy:
      # replicas: 2
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "com.khs1994.lnmp.redis=true"
    configs:
      - source: redis_conf
        target: /redis.conf
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.redis=true"

  php7:
    build:
      # context: ./dockerfile/php/
      context: ./app/demo/
      dockerfile: Dockerfile
      # args:
      #   foo: bar
      # cache_from:
      #   - alpine:3.7
      # labels:
      #   - "com.khs1994.lnmp.php7=true"
    #
    # image: username/lnmp-php:tag
    #
    # image: khs1994/lnmp-php:7.2.2
    #
    image: khs1994/php-fpm:7.2.2-alpine3.7
    volumes:
      - ./app:/app:rw
      # - ./config/php/php-fpm.production.conf:/usr/local/etc/php-fpm.conf:ro
      # - ./config/php/php-fpm.production.d/docker.conf:/usr/local/etc/php-fpm.d/docker.conf:ro
      # - ./config/php/php-fpm.production.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
      # - ./config/php/php.production.ini:/usr/local/etc/php/php.ini:ro
      - zoneinfo-data:/usr/share/zoneinfo:rw
    networks:
      - frontend
      - backend
    command: ["php-fpm","-R"]
    env_file: ./cli/timezone.env
    environment:
      - APP_ENV=production
      - KHS1994_LNMP_DOCKER_VERSION=v18.03-rc1 x86_64 Docker Swarm
    dns:
      - 114.114.114.114
    depends_on:
      - mysql
      - redis
    logging:
      driver: journald
    deploy:
      # replicas: 2
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "com.khs1994.lnmp.php7=true"
    configs:
      - source: php_ini
        target: /usr/local/etc/php/php.ini
      - source: php_fpm_conf
        target: /usr/local/etc/php-fpm.conf
      - source: php_fpm_conf_d_www_conf
        target: /usr/local/etc/php-fpm.d/www.conf
      - source: php_fpm_conf_d_docker_conf
        target: /usr/local/etc/php-fpm.d/docker.conf
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.php7=true"

  nginx:
    build:
      # context: ./dockerfile/nginx/
      context: ./config/nginx
      dockerfile: Dockerfile
    #
    # image: username/lnmp-nginx:tag
    #
    # image: khs1994/lnmp-nginx:1.13.9
    #
    image: khs1994/nginx:1.13.9-tls1.3-stretch
    env_file: ./cli/timezone.env
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./app:/app:rw
      - ./config/nginx:/etc/nginx/conf.d:ro
      #
      # 生产环境配置文件一个域名一个配置文件(configs)，一个 SSL key，一个 SSL crt(secrets)
      #
    networks:
      - frontend
    depends_on:
      - php7
    logging:
      driver: journald
    deploy:
      # replicas: 2
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "com.khs1994.lnmp.nginx=true"
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
        # uid: '103'
        # gid: '103'
        # mode: 0440
      # - source: nginx_khs1994_com_conf
      #   target: /etc/nginx/conf.d/khs1994.com.conf
      # - source: nginx_80_conf
      #   target: /etc/nginx/conf.d/80.conf
      # - source: nginx_301_conf
      #   target: /etc/nginx/conf.d/301.conf
      #
      #
      # Example Don't Edit
      #
      #
      # - source: nginx_domain_com_conf
      #   target: /etc/nginx/conf.d/domain.com.conf
    # secrets:
      # - source: khs1994_com_ssl_crt
      #   target: /etc/nginx/conf.d/ssl/khs1994.com.crt
      # - source: khs1994_com_ssl_key
      #   target: /etc/nginx/conf.d/ssl/khs1994.com.key
      # - source: developer_khs1994_com_ssl_crt
      #   target: /etc/nginx/conf.d/ssl/developer.khs1994.com.crt
      # - source: developer_khs1994_com_ssl_key
      #   target: /etc/nginx/conf.d/ssl/developer.khs1994.com.key
      # - source: auth_htpasswd
      #   target: /etc/nginx/conf.d/auth/nginx.htpasswd
      #
      #
      # Example Don't Edit
      #
      #
      # - source: domain_com_ssl_crt
      #   target: /etc/nginx/conf.d/ssl/domain.com.crt
      # - source: domain_com_ssl_key
      #   target: /etc/nginx/conf.d/ssl/domain.com.key
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost"]
    #   interval: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.nginx=true"

networks:
  frontend:
  backend:
  #
  # 使用外部 network
  #
  # my_other_network:
  #   external: true
  #   name: my-lnmp-network

volumes:
  mysql-data:
  redis-data:
  # rabbitmq-data:
  # postgresql-data:
  # mongodb-data:
  zoneinfo-data:
  #
  # 使用外部 volume
  #
  # my_other_volume:
  #   external: true
  #   name: my-app-data

secrets:
  db_root_password:
    file: secrets/db_root_password.txt
  # khs1994_com_ssl_key:
  #   file: ./config/nginx/ssl/khs1994.com.key
  # khs1994_com_ssl_crt:
  #   file: ./config/nginx/ssl/khs1994.com.crt
  # developer_khs1994_com_ssl_crt:
  #   file: ./config/nginx/ssl/developer.khs1994.com.crt
  # developer_khs1994_com_ssl_key:
  #   file: ./config/nginx/ssl/developer.khs1994.com.key
  # auth_htpasswd:
  #   file: ./config/nginx/auth/nginx.htpasswd
  #
  #
  # Example Don't Edit
  #
  #
  # domain_com_ssl_key:
  #   file: ./config/nginx/ssl/domain.com.key
  #
  # domain_com_ssl_crt:
  #   file: ./config/nginx/ssl/domain.com.crt
  #
  # 使用外部 secret
  #
  # my_other_secret:
  #   external: true
  # my_second_secret:
  #   external:
  #     name: redis_secret

configs:
  mysql_cnf:
    file: ./config/mysql/conf.production.d/docker.cnf
  nginx_conf:
    file: ./config/etc/nginx/nginx.production.conf
  # nginx_80_conf:
  #   file: ./config/nginx/conf.d/80.conf
  # nginx_301_conf:
  #   file: ./config/nginx/conf.d/301.conf
  # nginx_khs1994_com_conf:
  #   file ./config/nginx/conf.d/khs1994.com.conf
  #
  #
  # Example Don't Edit
  #
  #
  # nginx_domain_com_conf:
  #   file ./config/nginx/conf.d/domain.com.conf
  #
  php_ini:
    file: ./config/php/php.production.ini
  php_fpm_conf:
    file: ./config/php/php-fpm.production.conf
  php_fpm_conf_d_www_conf:
    file: ./config/php/php-fpm.production.d/www.conf
  php_fpm_conf_d_docker_conf:
    file: ./config/php/php-fpm.production.d/docker.conf
  redis_conf:
    file: ./config/redis/redis.production.conf
  #
  # 使用外部 config
  #
  # my_other_config:
  #   external: true
  # my_second_config:
  #   external:
  #     name: redis_config
