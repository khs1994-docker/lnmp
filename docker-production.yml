version: "3.5"

services:
  # 单节点 Swarm mode 集群
  #
  # khs1994.com Docker Swarm mode 最佳实践
  #
  # 开发环境构建镜像
  #
  # $ docker-compose -f docker-production.yml build
  # $ docker-compose -f docker-production.yml push
  #
  # 生产环境在集群部署
  #
  # $ docker stack deploy -c docker-production.yml lnmp
  # $ docker stack ps lnmp
  #
  # 原则
  #
  # 1. 尽可能减少 `volumes` 项
  # 2. 配置文件放到 `configs` 项
  # 3. 密码、密钥、证书等放到 `secrets` 项
  # 4. 日志使用日志驱动（journald 等）接管，严禁写入文件
  #
  # 注意
  #
  # 1. `docker stack deploy` 命令不支持在 compose 文件中使用变量
  #
  # 二次修改
  #
  # 严禁修改此文件
  #
  # $ cp docker-production.yml docker-production.khs1994.yml
  #
  # 然后基于 `docker-production.khs1994.yml` 自行调整配置
  # 本项目 CLI swarm-* 命令优先读取 `docker-production.*.yml` 文件

  mysql:
    build:
      context: ./dockerfile/mysql/
      dockerfile: Dockerfile
    #
    # image: username/lnmp-mysql:tag
    #
    # image: khs1994/lnmp-mysql:8.0.3
    #
    image: mysql:8.0.3
    env_file:
      - ./cli/timezone.env
    environment:
      # MYSQL_ROOT_PASSWORD: mytest
      MYSQL_ROOT_PASSWORD_FILE: /etc/db_root_password
      MYSQL_DATABASE: test
    networks:
      - backend
    # ports:
    #   - "127.0.0.1:3306:3306"
    volumes:
      - ./backup/init.production:/docker-entrypoint-initdb.d:ro
      - ./backup/mysql:/backup:rw
      - mysql-data:/var/lib/mysql:rw
      # - ./config/mysql/conf.production.d:/etc/mysql/conf.d:ro
    command: ["mysqld","--character-set-server=utf8mb4"]
    logging:
      driver: journald
    deploy:
      placement:
        # 在管理节点运行
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      # resources:
      #   limits:
      #     cpus: '0.50'
      #     memory: 50M
      #   reservations:
      #     cpus: '0.25'
      #     memory: 20M
      labels:
        - "com.khs1994.lnmp.mysql=true"
    secrets:
      - source: db_root_password
        target: /etc/db_root_password
    configs:
      - source: mysql_conf_d_docker_cnf
        target: /etc/mysql/conf.d/docker.cnf
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.mysql=true"

  # mariadb:
  #   build:
  #     context: ./dockerfile/mariadb/
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-mariadb:tag
  #   #
  #   # image: khs1994/lnmp-mariadb:8.0.3
  #   #
  #   image: "mariadb:10.3.4"
  #   environment:
  #     MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
  #     MYSQL_DATABASE: test
  #     # MYSQL_USER:
  #     # MYSQL_PASSWORD:
  #   env_file: ./cli/timezone.env
  #   # ports:
  #   #   - "127.0.0.1:3306:3306"
  #   networks:
  #     - backend
  #   volumes:
  #     # - ./config/mariadb/conf.d:/etc/mysql/conf.d:ro
  #     # https://github.com/docker-library/docs/tree/master/mariadb#initializing-a-fresh-instance
  #     - ./backup/init.production:/docker-entrypoint-initdb.d:ro
  #     - mariadb-data:/var/lib/mysql:rw
  #     - ./backup/mariadb:/backup:rw
  #   command:
  #     - mysqld
  #     - --character-set-server=utf8mb4
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #   logging:
  #     driver: journald
  #   secrets:
  #     - db_root_password
  #   configs:
  #     - source: mariadb_conf_d_docker_cnf
  #       target: /etc/mysql/conf.d/docker.cnf
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.mariadb=true"

  redis:
    build:
      context: ./dockerfile/redis/
      dockerfile: Dockerfile
    #
    # image: username/lnmp-redis:tag
    #
    # image: khs1994/lnmp-redis:4.0.8
    #
    image: redis:4.0.8-alpine
    env_file: ./cli/timezone.env
    # ports:
    #   - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data:rw
    networks:
      - backend
    command: [
      "redis-server",
      "/redis.conf",
      "--daemonize no",
      "--bind 0.0.0.0"
      ]
    logging:
      driver: journald
    deploy:
      # replicas: 2
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "com.khs1994.lnmp.redis=true"
    configs:
      - source: redis_conf
        target: /redis.conf
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.redis=true"

  # memcached:
  #   build:
  #     context: ./dockerfile/memcached/
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-memcached:tag
  #   #
  #   # image: khs1994/lnmp-memcached:1.5.4
  #   #
  #   image: memcached:1.5.4-alpine
  #   networks:
  #     - backend
  #   env_file: ./cli/timezone.env
  #   # ports:
  #   #   - "127.0.0.1:11211:11211"
  #   volumes:
  #     - zoneinfo-data:/usr/share/zoneinfo:rw
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #   logging:
  #     driver: journald
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.memcached=true"

  # rabbitmq:
  #   build:
  #     context: ./dockerfile/rabbitmq/
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-rabbitmq:tag
  #   #
  #   # image: khs1994/lnmp-rabbitmq:3.7.2
  #   #
  #   image: rabbitmq:3.7.2-management-alpine
  #   volumes:
  #     - rabbitmq-data:/var/lib/rabbitmq:rw
  #     - zoneinfo-data:/usr/share/zoneinfo:rw
  #   networks:
  #     - backend
  #   env_file: ./cli/timezone.env
  #   # ports:
  #   #   - "127.0.0.1:15672:15672"
  #   #   - "127.0.0.1:5672:5672"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #   logging:
  #     driver: journald
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.rabbitmq=true"

  # postgresql:
  #   build:
  #     context: ./dockerfile/postgresql/
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-postgresql:tag
  #   #
  #   # image: khs1994/lnmp-postgresql:10.1
  #   #
  #   image: postgres:10.1-alpine
  #   environment:
  #     - POSTGRES_PASSWORD_FILE=/run/secrets/db_root_password
  #     - POSTGRES_DB=test
  #   volumes:
  #     - zoneinfo-data:/usr/share/zoneinfo:rw
  #     - postgresql-data:/var/lib/postgresql/data:rw
  #   networks:
  #     - backend
  #   env_file: ./cli/timezone.env
  #   # ports:
  #   #   - "127.0.0.1:5432:5432"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #   logging:
  #     driver: journald
  #   secrets:
  #     # 默认与 mysql 密码一致。
  #     - db_root_password
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.postgresql=true"

  # mongodb:
  #   build:
  #     context: ./dockerfile/mongodb/
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-mongodb:tag
  #   #
  #   # image: khs1994/lnmp-mongodb:3.7.1
  #   #
  #   image: mongo:3.7.1
  #   env_file: ./cli/timezone.env
  #   volumes:
  #     # - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
  #     - mongodb-data:/data/db:rw
  #   networks:
  #     - backend
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #   logging:
  #     driver: journald
  #   # ports:
  #   #    - "127.0.0.1:27017:27017"
  #   command: ["mongod","--config","/etc/mongod.conf"]
  #   configs:
  #     - source: mongod_conf
  #       target: /etc/mongod.conf
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.mongodb=true"

  php7:
    build:
      # context: ./dockerfile/php/
      context: ./app/demo/
      dockerfile: Dockerfile
      # args:
      #   foo: bar
      # cache_from:
      #   - alpine:3.7
      # labels:
      #   - "com.khs1994.lnmp.php7=true"
    #
    # image: username/lnmp-php:tag
    #
    # image: khs1994/lnmp-php:7.2.2
    #
    image: khs1994/php-fpm:7.2.2-alpine3.7
    volumes:
      - ./app:/app:rw
      # - ./config/php/php-fpm.production.conf:/usr/local/etc/php-fpm.conf:ro
      # - ./config/php/php-fpm.production.d/docker.conf:/usr/local/etc/php-fpm.d/docker.conf:ro
      # - ./config/php/php-fpm.production.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
      # - ./config/php/php.production.ini:/usr/local/etc/php/php.ini:ro
      - zoneinfo-data:/usr/share/zoneinfo:rw
    networks:
      - frontend
      - backend
      - cluster_mysql
    command: ["php-fpm","-R"]
    env_file: ./cli/timezone.env
    environment:
      - APP_ENV=production
      - KHS1994_LNMP_DOCKER_VERSION=v18.03-rc2 x86_64 Docker Swarm
    dns:
      - 114.114.114.114
    depends_on:
      - mysql
      - redis
    logging:
      driver: journald
    deploy:
      # replicas: 2
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "com.khs1994.lnmp.php7=true"
    configs:
      - source: php_ini
        target: /usr/local/etc/php/php.ini
      - source: php_fpm_conf
        target: /usr/local/etc/php-fpm.conf
      - source: php_fpm_conf_d_www_conf
        target: /usr/local/etc/php-fpm.d/www.conf
      - source: php_fpm_conf_d_docker_conf
        target: /usr/local/etc/php-fpm.d/docker.conf
    secrets:
      - source: ssh_id_rsa
        target: /root/.ssh/id_rsa
        mode: 0600
      - source: ssh_config
        target: /root/.ssh/config
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.php7=true"

  nginx:
    build:
      # context: ./dockerfile/nginx/
      context: ./config/nginx
      dockerfile: Dockerfile
    #
    # image: username/lnmp-nginx:tag
    #
    # image: khs1994/lnmp-nginx:1.13.9
    #
    image: khs1994/nginx:1.13.9-tls1.3-stretch
    env_file: ./cli/timezone.env
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./app:/app:rw
      - ./config/nginx:/etc/nginx/conf.d:ro
    networks:
      - frontend
    depends_on:
      - php7
    logging:
      driver: journald
    deploy:
      # replicas: 2
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 123s
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
      labels:
        - "com.khs1994.lnmp.nginx=true"
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
        # uid: '103'
        # gid: '103'
        # mode: 0440
      #
      # 一个域名一个子配置文件
      # 例如 *.khs1994.com *.developer.khs1994.com 均放到一个子配置文件中
      # *.khs1994.com.cn 放到另外一个子配置文件中
      #
      # - source: nginx_khs1994_com_conf
      #   target: /etc/nginx/conf.d/khs1994.com.conf
      # - source: nginx_80_conf
      #   target: /etc/nginx/conf.d/80.conf
      # - source: nginx_301_conf
      #   target: /etc/nginx/conf.d/301.conf
      #
      #
      # Example Don't Edit
      #
      #
      # - source: nginx_domain_com_conf
      #   target: /etc/nginx/conf.d/domain.com.conf
    # secrets:
      #
      # *.khs1994.com 两个证书密钥
      # *.developer.khs1994.com 两个证书密钥
      # 以此类推
      #
      # - source: khs1994_com_ssl_crt
      #   target: /etc/nginx/conf.d/ssl/khs1994.com.crt
      # - source: khs1994_com_ssl_key
      #   target: /etc/nginx/conf.d/ssl/khs1994.com.key
      # - source: developer_khs1994_com_ssl_crt
      #   target: /etc/nginx/conf.d/ssl/developer.khs1994.com.crt
      # - source: developer_khs1994_com_ssl_key
      #   target: /etc/nginx/conf.d/ssl/developer.khs1994.com.key
      # - source: auth_htpasswd
      #   target: /etc/nginx/conf.d/auth/nginx.htpasswd
      #
      #
      # Example Don't Edit
      #
      #
      # - source: domain_com_ssl_crt
      #   target: /etc/nginx/conf.d/ssl/domain.com.crt
      # - source: domain_com_ssl_key
      #   target: /etc/nginx/conf.d/ssl/domain.com.key
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost"]
    #   interval: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    labels:
      - "com.khs1994.lnmp.app.env=production_swarm_mode"
      - "com.khs1994.lnmp.nginx=true"

  # apache:
  #   build:
  #     context: ./config/apache
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-apache:tag
  #   #
  #   # image: khs1994/lnmp-apache:2.4.29
  #   #
  #   image: "httpd:2.4.29-alpine"
  #   env_file:
  #     - ./cli/timezone.env
  #   ports:
  #     - "443:443"
  #     - "80:80"
  #   volumes:
  #     - ./app:/app:rw
  #     # - ./config/etc/apache2/httpd.conf:/usr/local/apache2/conf/httpd.conf
  #     # - ./config/apache2:/usr/local/apache2/conf.d
  #     - zoneinfo-data:/usr/share/zoneinfo:rw
  #   working_dir: /app
  #   networks:
  #     - frontend
  #   depends_on:
  #     - php7
  #   logging:
  #     driver: journald
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #   configs:
  #     - source: httpd_conf
  #       target: /usr/local/apache2/conf/httpd.conf
  #     - source: vhost_khs1994_com_conf
  #       target: /usr/local/apache2/conf.d/vhost.khs1994.com.conf
  #     #
  #     #
  #     # Example Don't Edit
  #     #
  #     #
  #     # - source: vhost_domain_com_conf
  #     #   target: /usr/local/apache2/conf.d/vhost.domain.com.conf
  #   secrets:
  #     - source: khs1994_com_ssl_crt
  #       target: /usr/local/apache2/conf.d/ssl/khs1994.com.crt
  #     - source: khs1994_com_ssl_key
  #       target: /usr/local/apache2/conf.d/ssl/khs1994.com.key
  #     - source: developer_khs1994_com_ssl_crt
  #       target: /usr/local/apache2/conf.d/ssl/developer.khs1994.com.crt
  #     - source: developer_khs1994_com_ssl_key
  #       target: /usr/local/apache2/conf.d/ssl/developer.khs1994.com.key
  #     #
  #     #
  #     # Example Don’t Edit
  #     #
  #     #
  #     # - source: domain_com_ssl_crt
  #     #   target: /usr/local/apache2/conf.d/ssl/domain.com.crt
  #     # - source: domain_com_ssl_key
  #     #   target: /usr/local/apache2/conf.d/ssl/domain.com.key
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.apache=true"

  # registry:
  #   build:
  #     context: ./config/registry
  #     dockerfile: Dockerfile
  #   #
  #   # image: username/lnmp-registry:tag
  #   #
  #   # image: khs1994/lnmp-registry:latest
  #   #
  #   image: registry:latest
  #   networks:
  #     - frontend
  #     - backend
  #   # ports:
  #   #   - "127.0.0.1:5000:5000"
  #   volumes:
  #     # - ./config/registry:/etc/docker/registry
  #     - registry-data:/var/lib/registry
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 5
  #       window: 123s
  #     update_config:
  #       parallelism: 2
  #       delay: 10s
  #       order: stop-first
  #     labels:
  #       - "com.khs1994.lnmp.mysql=true"
  #   logging:
  #     driver: journald
  #   configs:
  #     - source: registy_yml
  #       target: /etc/docker/registry/config.yml
  #   labels:
  #     - "com.khs1994.lnmp.app.env=production_swarm_mode"
  #     - "com.khs1994.lnmp.apache=true"

networks:
  frontend:
  backend:
  cluster_mysql:

volumes:
  mysql-data:
  # mariadb-data:
  redis-data:
  # rabbitmq-data:
  # postgresql-data:
  # mongodb-data:
  zoneinfo-data:
  # registry-data:

secrets:
  db_root_password:
    file: secrets/db_root_password.txt
  # khs1994_com_ssl_key:
  #   file: ./config/nginx/ssl/khs1994.com.key
  # khs1994_com_ssl_crt:
  #   file: ./config/nginx/ssl/khs1994.com.crt
  # developer_khs1994_com_ssl_crt:
  #   file: ./config/nginx/ssl/developer.khs1994.com.crt
  # developer_khs1994_com_ssl_key:
  #   file: ./config/nginx/ssl/developer.khs1994.com.key
  # auth_htpasswd:
  #   file: ./config/nginx/auth/nginx.htpasswd
  #
  #
  # Example Don't Edit
  #
  #
  # domain_com_ssl_key:
  #   file: ./config/nginx/ssl/domain.com.key
  #
  # domain_com_ssl_crt:
  #   file: ./config/nginx/ssl/domain.com.crt
  #
  #
  # SSH 相关文件 CI/CD 专用
  # 务必自行调整 ssh id_rsa 路径（绝对路径）
  #
  #
  ssh_id_rsa:
    file: /root/.ssh/id_rsa
  #
  # SSH 配置不验证密钥
  #
  ssh_config:
    file: ./secrets/ssh_config

configs:
  mysql_conf_d_docker_cnf:
    file: ./config/mysql/conf.production.d/docker.cnf
  # mariadb_conf_d_docker_cnf:
  #   file: ./config/mariadb/conf.production.d/docker.cnf
  nginx_conf:
    file: ./config/etc/nginx/nginx.production.conf
  # nginx_80_conf:
  #   file: ./config/nginx/conf.d/80.conf
  # nginx_301_conf:
  #   file: ./config/nginx/conf.d/301.conf
  # nginx_khs1994_com_conf:
  #   file ./config/nginx/conf.d/khs1994.com.conf
  #
  #
  # NGINX Example Don't Edit
  #
  #
  # nginx_domain_com_conf:
  #   file ./config/nginx/conf.d/domain.com.conf
  #
  # httpd_conf:
  #   file: ./config/etc/apache2/httpd.production.conf
  # vhost_khs1994_com_conf:
  #   file: ./config/apache2/khs1994.com.conf
  #
  #
  # Apache Example Don't Edit
  #
  #
  # vhost_domain_com_conf:
  #   file: ./config/apache2/domain.com.conf
  php_ini:
    file: ./config/php/php.production.ini
  php_fpm_conf:
    file: ./config/php/php-fpm.production.conf
  php_fpm_conf_d_www_conf:
    file: ./config/php/php-fpm.production.d/www.conf
  php_fpm_conf_d_docker_conf:
    file: ./config/php/php-fpm.production.d/docker.conf
  redis_conf:
    file: ./config/redis/redis.production.conf
  # mongod_conf:
  #   file: ./config/mongodb/mongod.production.conf
  # registy_yml:
  #   file: ./config/registry/config.production.yml
